require 'math'
require 'src.game_state'

local ProjParams = @record{
  pos: Nene.Math.Vec2,
  dir: Nene.Math.Vec2,
  should_create: boolean
}

global Game.Level = @record{
  alpinist: Game.Entities.Alpinist,
  win_screen_ratio: Nene.Math.Vec2,
  initialized: boolean,
  map_pos_x: integer,
  map_height: integer,
  proj_alpinist: ProjParams,
  projs_flying_disc: vector(ProjParams),
  spawn_timer: number,
}
local Level = Game.Level

function Level.new(game: *Game.State): Level
  return (@Level){
    win_screen_ratio = {
      game.nene_state.screen_texture.width / game.window_size.x,
      game.nene_state.screen_texture.height / game.window_size.y,
    },
    projs_flying_disc = {},
  }
end

function Level:init(game: *Game.State)
  check(not self.initialized, 'A initialized level should not be initialized again')

  local tile_size = Game.static_settings.tile_size
  local screen_w = game.nene_state.screen_texture.width

  self.map_pos_x = screen_w - tile_size * 3
  self.map_height = tile_size * game.resources.map.tilemap.height

  self.alpinist = game:create_alpinist({screen_w - tile_size * 4, 32})

  game:create_map({self.map_pos_x, 0})
  game:create_map({self.map_pos_x, -self.map_height})

  game:create_surf_collider({self.map_pos_x, 0}, {1, game.resources.map.tilemap.height})


  self.initialized = true
end

function Level:update(game: *Game.State)
  check(self.initialized, 'Level must be initialized before using this method')

  if self.proj_alpinist.should_create then
    game:create_projectile(self.proj_alpinist.pos, self.proj_alpinist.dir,
                           Game.Entities.Projectile.Speed.Alpinist, Game.IntersectableMasks.ProjAlpinist)
  end

  for i = 0, < #self.projs_flying_disc do
    game:create_projectile(self.projs_flying_disc[i].pos, self.projs_flying_disc[i].dir,
                           Game.Entities.Projectile.Speed.Enemy, Game.IntersectableMasks.ProjEnemy)
  end

  self.proj_alpinist.should_create = false
  self.projs_flying_disc:clear()

  self.spawn_timer = self.spawn_timer + game.nene_state.deltatime

  if self.spawn_timer >= 1 then
    local enemy_w: number, enemy_h: number = game.resources.flying_disc.texture_atlas.unit_width,
                                             game.resources.flying_disc.texture_atlas.unit_height
    game:create_flying_disc({-enemy_w, math.random(0, game.nene_state.screen_texture.height - enemy_h)})
    self.spawn_timer = 0
  end
end

function Level:alpinist_shoot(pos: Nene.Math.Vec2, dir: Nene.Math.Vec2)
  check(self.initialized, 'Level must be initialized before using this method')
  self.proj_alpinist = {=pos, =dir, true}
end

function Level:flying_disc_shoot(pos: Nene.Math.Vec2, dir: Nene.Math.Vec2)
  check(self.initialized, 'Level must be initialized before using this method')
  self.projs_flying_disc:push({=pos, =dir, true})
end

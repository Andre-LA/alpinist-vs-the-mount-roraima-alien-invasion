require 'nene'
require 'rotor'
require 'irene'

require 'settings'
require 'sfx_emitter'

require 'life'
require 'shooter'
require 'entities.alpinist.controllable'
require 'entities.alpinist.controller'

local Vec2 = @Math.Vec2

global Game.Entities.Alpinist = @MakeEntity('alpinist',
  Game.Comps.Life,
  Game.Comps.Shooter,
  Game.Comps.AlpinistControllable,

  Irene.Comps.Position,

  Irene.Comps.Gravity,
  Irene.Comps.Velocity,

  Irene.Comps.Intersectable,
  Irene.Comps.Intersections,

  Irene.Comps.TextureComp,
  Irene.Comps.Sprite,
  Irene.Comps.AnimationPlayer,
  Irene.Comps.Painter
)
local Alpinist = @Game.Entities.Alpinist

local function decrease_life_points(entity_id: GenerationalIndex)
  local life_opt = Game.Comps.Life.get_entry_from_entity_id(entity_id)

  if life_opt.filled then
    local life = life_opt:get()
    life.points = life.points - 1

    if life.points > 0 then
      SfxEmitter.emit.alpinist_hit = true
    else
      SfxEmitter.emit.alpinist_final_hit = true
    end
  end
end

function Alpinist.create(nene: *Nene, pos: Vec2, alpinist_texture: Texture, spritesheet: SpriteSheet, animations: hashmap(string, AnimationRange)): (Alpinist, *Entity)
  local gravity_acceleration <const> = Settings.general.gravity_acceleration
  local tile_size <const> = Settings.general.tile_size

  check(animations:peek('climbing'))
  local start_anim = animations['climbing']

  local alpinist, alpinist_ent = Alpinist.new{
    life = {
      points = 10,
    },

    shooter = {},

    alpinist_controllable = {
      climb_speed = tile_size * 6,
      shoot_interval = 150,
    },

    position = {
      local_position = pos,
    },

    gravity = {
      active = false,
      acceleration = gravity_acceleration,
      direction = {0, 1},
    },

    velocity = {
      active = true,
    },

    intersectable = {
      mask = Settings.IntersectableMasks.Alpinist,
    },

    intersections = {
      on_enter_callback = function(
          self_intersectable: *Irene.Comps.Intersectable,
          self_intersections: *Irene.Comps.Intersections,
          other_intersectable: *Irene.Comps.Intersectable
        )
          if other_intersectable.mask == Settings.IntersectableMasks.ProjEnemy then
            decrease_life_points(self_intersectable.entity_id)
          end
        end
    },

    texture_comp = {
      texture = alpinist_texture,
    },

    sprite = {
      =spritesheet,
      layer = Settings.SpriteLayer.Alpinist,
      current_frame = start_anim.from,
    },

    animation_player = {
      speed = 1,
      last_change_time = nene.current_time,
      looping = true,

      animations = animations,
      current_animation = animations['climbing']
    },

    painter = {
      color = Color.Palette.white,
      active = true,
    },
  }

  local intersectable = alpinist:get_component(@Irene.Comps.Intersectable)
  intersectable.local_rect = {20, 0, 16, 37}
  intersectable:set_global_rect(pos)

  return alpinist, alpinist_ent
end

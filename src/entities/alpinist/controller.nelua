require 'nene'
require 'rotor'
require 'irene.makers'

local Vec2 = @Math.Vec2

local AlpinistState = Game.Comps.AlpinistControllable.AlpinistState

local AlpinistController = @MakeSystem('AlpinistController', @record{
  alpinist_controllable: Game.Comps.AlpinistControllable,
  shooter: Game.Comps.Shooter,

  position: Irene.Comps.Position,
  velocity: Irene.Comps.Velocity,

  animation_player: Irene.Comps.AnimationPlayer,
  sprite: Irene.Comps.Sprite,
})

global Game.Sys.AlpinistController = @AlpinistController

local Controls = @record{
  mov_up: boolean,
  mov_down: boolean,
  shooting: boolean,
}

function AlpinistController:run(
  nene: *Nene,
  in_game_mouse_pos: Vec2,
  proj_instantiator: function(pos: Vec2, dir: Vec2)
)
  for _, components in self:iterate_components() do
    local controllable = components.alpinist_controllable
    local shooter = components.shooter
    local position = components.position
    local velocity = components.velocity
    local animation_player = components.animation_player
    local sprite = components.sprite

    local controls: Controls <const> = {
      mov_up   = nene:get_scancode(SDL_SCANCODE_UP) or nene:get_scancode(SDL_SCANCODE_W),
      mov_down = nene:get_scancode(SDL_SCANCODE_DOWN) or nene:get_scancode(SDL_SCANCODE_S),
      shooting = nene.mouse_buttons[0],
    }

    velocity.final_velocity = {0, 0}

    switch controllable.state
      case AlpinistState.Climbing then
        -- vertical movement
        local run_diretion = (do
          if controls.mov_up then return -1
          elseif controls.mov_down then return 1
          else return 0
          end
        end)

        velocity.final_velocity.y = controllable.climb_speed * run_diretion * nene.delta_time

        -- if it's shooting, should stop and change state
        if controls.shooting then
          velocity.final_velocity.y = 0
          controllable.state = AlpinistState.Shooting

          local alpinist_gl_pos = position:get_global_position()
          local proj_dir = Irene.Comps.Target.get_direction_from_pos(alpinist_gl_pos, in_game_mouse_pos)

          local shooting_anim_name = (do
            if proj_dir.y < -0.3 then
              return 'shooting_up'
            elseif proj_dir.y > 0.3 then
              return 'shooting_down'
            else
              return 'shooting_left'
            end
          end)

          animation_player:change_animation(sprite, shooting_anim_name, nene.current_time)
        end

      case AlpinistState.Shooting then
        -- if it's not shooting, should stop and change state
        if not controls.shooting then
          controllable.state = AlpinistState.Climbing
          animation_player:change_animation(sprite, 'climbing', nene.current_time)
          continue
        end

        local time_diff = nene.current_time - shooter.last_shoot

        if controls.shooting and time_diff >= controllable.shoot_interval then
          shooter.last_shoot = nene.current_time
          -- shoot in the direction of the mouse cursor position relative to alpinist's position
          local alpinist_gl_pos = position:get_global_position()
          local proj_dir = Irene.Comps.Target.get_direction_from_pos(alpinist_gl_pos, in_game_mouse_pos)

          local proj_pos = alpinist_gl_pos
          local shooting_anim_name = 'shooting_left'

          if proj_dir.y < -0.3 then
            shooting_anim_name = 'shooting_up'
            proj_pos = proj_pos + Vec2{-4, -6}
          elseif proj_dir.y > 0.3 then
            shooting_anim_name = 'shooting_down'
            proj_pos = proj_pos + Vec2{-4, 36}
          else
            shooting_anim_name = 'shooting_left'
            proj_pos = proj_pos + Vec2{-10, 16}
          end

          proj_dir = Irene.Comps.Target.get_direction_from_pos(proj_pos, in_game_mouse_pos)
          animation_player:change_animation(sprite, shooting_anim_name, nene.current_time)

          proj_instantiator(proj_pos, proj_dir)
          Game.sfx_emitter.alpinist_laser_shoot = true
        end
    end

    local map_movement = Game.static_settings.map_vel * Game.static_settings.tile_size * nene.delta_time
    velocity:add_velocity({0, map_movement})
  end
end

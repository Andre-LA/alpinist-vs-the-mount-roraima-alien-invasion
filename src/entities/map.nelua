require 'nene'
require 'rotor'
require 'irene'
require 'game'

local Vec2 = @Math.Vec2

local MapControllable = @record{ b: byte }
## Irene.impl_is_component(MapControllable)

local MapController = @MakeSystem('map_controller', @record{
  map_controllable: MapControllable, -- works as a tag
  position: Irene.Comps.Position,
  velocity: Irene.Comps.Velocity,
})
global Game.Sys.MapController = @MapController

function MapController:run(dt: number, map_height: number)
  for _, components in self:iterate_components() do
    local velocity = components.velocity
    local position = components.position

    local gl_pos_y = position:get_global_position().y

    if gl_pos_y <= map_height then
      velocity.final_velocity.y = Settings.general.tile_size * Settings.general.map_vel * dt
    else
      velocity.final_velocity.y = 0
      position.local_position.y = -map_height + 4
    end
  end
end

global Game.Entities.Map = @MakeEntity('map',
  MapControllable,

  Irene.Comps.Position,
  Irene.Comps.Velocity,

  Irene.Comps.TextureComp,
  Irene.Comps.TilemapComp,
  Irene.Comps.Painter
)
local Map = Game.Entities.Map

function Map.create(pos: Vec2, map_texture: Texture, tilemap: Tilemap): (Map, *Entity)
  local map, map_ent = Map.new{
    position = {
      local_position = pos,
    },

    velocity = {
      active = true,
    },

    texture_comp = {
      texture = map_texture,
    },

    tilemap_comp = {
      =tilemap,
    },

    painter = {
      color = Color.Palette.white,
      active = true,
    },
  }

  return map, map_ent
end

require 'math'
require 'nene'
require 'rotor'
require 'irene.makers'

local Vec2 = @Math.Vec2

global Game.Sys.FlyingDiscController = @MakeSystem('FlyingDiscController', @record{
  flying_disc_controllable: Game.Comps.FlyingDiscControllable,
  shooter: Game.Comps.Shooter,
  target: Irene.Comps.Target,
  follower: Irene.Comps.Follower,
  position: Irene.Comps.Position,
  velocity: Irene.Comps.Velocity,
})

local FlyingDiscController = Game.Sys.FlyingDiscController

function FlyingDiscController:run(
  nene: *Nene,
  wall_pos_x: number,
  proj_instantiator_callback: function(pos: Vec2, dir: Vec2)
)
  for _, components in self:iterate_components() do
    local controllable = components.flying_disc_controllable
    local shooter = components.shooter
    local target = components.target
    local follower = components.follower
    local position = components.position
    local velocity = components.velocity

    -- flying movement
    local fd_gl_pos = position:get_global_position()
    local wall_distance = wall_pos_x - fd_gl_pos.x
    local alpinist_distance = target:get_distance(fd_gl_pos)

    local is_alpinist_close = alpinist_distance < controllable.min_distance
    local is_wall_close = wall_distance < controllable.min_distance
    local is_right_of_wall = fd_gl_pos.x > wall_pos_x

    local dir_to_alpinist = target:get_direction(fd_gl_pos)
    local dir: Vec2 = dir_to_alpinist

    if is_alpinist_close or is_wall_close then
      local neg_mul = is_alpinist_close and -1.3 or -2
      dir = { neg_mul, 0 }
    end

    local speed_abs = math.abs(follower.speed)
    follower.speed = is_alpinist_close and -speed_abs or speed_abs

    if is_alpinist_close or is_wall_close or is_right_of_wall then
      velocity:add_velocity(dir * (speed_abs / 6) * nene.delta_time)
    end

    velocity.final_velocity = Irene.Comps.Velocity.get_limited_velocity(velocity.final_velocity, velocity.max_velocity * nene.delta_time)

    -- shooting
    local time_diff = nene.current_time - shooter.last_shoot

    if time_diff >= controllable.shoot_interval then
      shooter.last_shoot = nene.current_time

      local proj_pos = position:get_global_position() + (@Vec2){24, 0}
      proj_instantiator_callback(proj_pos, dir_to_alpinist)
    end
  end
end

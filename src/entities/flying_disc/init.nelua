require 'math'

require 'nene'
require 'rotor'
require 'irene.makers'

require 'life'
require 'shooter'
require 'entities.flying_disc.controllable'
require 'entities.flying_disc.controller'

local Vec2 = @Math.Vec2

local FlyingDisc = @MakeEntity('flying_disc',
  Game.Comps.Life,
  Game.Comps.Shooter,
  Game.Comps.FlyingDiscControllable,

  Irene.Comps.Target,
  Irene.Comps.Follower,

  Irene.Comps.Position,
  Irene.Comps.Velocity,

  Irene.Comps.Intersectable,
  Irene.Comps.Intersections,
  Irene.Comps.Collider,

  Irene.Comps.TextureComp,
  Irene.Comps.Sprite,
  Irene.Comps.Painter
)
global Game.Entities.FlyingDisc = @FlyingDisc

local function decrease_life_points(entity_id: GenerationalIndex): integer
  local life_opt = Game.Comps.Life.get_entry_from_entity_id(entity_id)
  if life_opt.filled then
    local life = life_opt:get()
    life.points = life.points - 1

    if life.points == 0 then
      SfxEmitter.emit.enemy_explosion = true
    else
      SfxEmitter.emit.enemy_hit = true
    end

    return life.points
  else
    return -1
  end
end

local function destroy_flying_disc(entity_id: GenerationalIndex)
  local flying_disc_e_opt = FlyingDisc.get_entry_from_entity_id(entity_id)

  if flying_disc_e_opt.filled then
    local flying_disc_e = flying_disc_e_opt:get()
    flying_disc_e:destroy({
      intersections = Irene.Comps.Intersections.destroy
    })
  end
end

function FlyingDisc.create(
  nene: *Nene,
  pos: Vec2,
  flying_disc_texture: Texture,
  spritesheet: SpriteSheet,
  alpinist_pos_id: GenerationalIndex
): (FlyingDisc, *Entity)

  local gravity_acceleration <const> = Settings.general.gravity_acceleration
  local tile_size <const> = Settings.general.tile_size

  local shoot_interval <comptime> = 2500

  local flying_disc, flying_disc_ent = FlyingDisc.new{
    life = {
      points = 2,
    },

    shooter = {
      last_shoot = math.max(nene.current_time - (shoot_interval - 1000), 0),
    },

    flying_disc_controllable = {
      min_distance = tile_size * 7,
      =shoot_interval,
    },

    target = {
      pos_target_id = alpinist_pos_id,
    },

    follower = {
      speed = tile_size / 2,
    },

    position = {
      local_position = pos,
    },

    velocity = {
      active = true,
      max_velocity = tile_size * 12,
    },

    intersectable = {
      mask = Settings.IntersectableMasks.Enemy,
    },

    intersections = {
      on_enter_callback = function(
          self_intersectable: *Irene.Comps.Intersectable,
          self_intersections: *Irene.Comps.Intersections,
          other_intersectable: *Irene.Comps.Intersectable
        )
        if other_intersectable.mask == Settings.IntersectableMasks.ProjAlpinist then
          Game.Entities.Projectile.destroy_projectile(other_intersectable.entity_id)

          local life = decrease_life_points(self_intersectable.entity_id)
          if life == 0 then
            destroy_flying_disc(self_intersectable.entity_id)
          end
        end
      end
    },

    collider = {
      tolerance = 2,
      mask = Settings.IntersectableMasks.SurfaceTile,
    },

    texture_comp = {
      texture = flying_disc_texture
    },

    sprite = {
      =spritesheet,
      layer = Settings.SpriteLayer.Enemy,
    },

    painter = {
      color = Color.Palette.white,
      active = true,
    },
  }

  local intersectable_vertices: [2]Vec2 = { {}, { 20, 26} }
  local intersectable = flying_disc:get_component(@Irene.Comps.Intersectable)
  intersectable:init(pos, &intersectable_vertices)

  return flying_disc, flying_disc_ent
end

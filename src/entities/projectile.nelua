require 'nene'
require 'rotor'
require 'irene.makers'

local Vec2 = @Math.Vec2

global Game.Comps.ProjectileIds = @record{
  projectile_ids: GenerationalIndex,
  position: GenerationalIndex,
  velocity: GenerationalIndex,
  intersectable: GenerationalIndex,
  sprite: GenerationalIndex,
  animation_player: GenerationalIndex,
  painter: GenerationalIndex,
}
local ProjectileIds = @Game.Comps.ProjectileIds
## Irene.impl_is_component(ProjectileIds)

global Game.Entities.Projectile = @MakeEntity('projectile',
  ProjectileIds,

  Irene.Comps.Position,
  Irene.Comps.Velocity,

  Irene.Comps.Intersectable,

  Irene.Comps.TextureComp,
  Irene.Comps.Sprite,
  Irene.Comps.AnimationPlayer,
  Irene.Comps.Painter
)
local Projectile = @Game.Entities.Projectile

global Projectile.Speed = @enum{
  Alpinist = 16,
  Enemy = 6,
}

function Projectile.create(
  pos: Vec2,
  direction: Vec2,
  proj_texture: Texture,
  spritesheet: SpriteSheet,
  animations: hashmap(string, AnimationRange),
  speed: number,
  mask: Game.IntersectableMasks
): (Projectile, *Entity)
  local tile_size <const> = Game.static_settings.tile_size

  local start_anim = animations[(mask == Game.IntersectableMasks.ProjAlpinist and 'proj_alpinist' or 'proj_enemy')]

  local proj, proj_ent = Projectile.new{
    position = {
      local_position = pos,
    },

    velocity = {
      active = true,
      final_velocity = direction * tile_size * speed,
    },

    intersectable = {
      =mask,
    },

    texture_comp = {
      texture = proj_texture,
    },

    sprite = {
      =spritesheet,
      layer = Game.SpriteLayer.Projectile,
      current_frame = start_anim.from,
    },

    animation_player = {
      current_animation = start_anim,
      =animations,
      speed = 1,
      looping = true,
    },

    painter = {
      active = true,
      color = Color.Palette.white,
    },
  }

  local intersectable_vertices: [2]Vec2 = { {}, {8, 8} }

  local intersectable = proj:get_component(@Irene.Comps.Intersectable)
  intersectable:init(pos, &intersectable_vertices)

  local proj_ids = proj:get_component(@Game.Comps.ProjectileIds)

  ##[[
  local ignore_ids = {
    entity_id = true,
    self_id = true,
    projectile_id = true,
    texture_comp_id = true,
  }
  ]]

  ## for i, field in ipairs(Projectile.value.fields) do
    ## if not ignore_ids[field.name] then
      proj_ids.#|field.name:sub(1, -4)|# = proj.#|field.name|#
    ## end
  ## end

  return proj, proj_ent
end

function Projectile.destroy_projectile(entity_id: GenerationalIndex)
  local proj_ids_opt = Game.Comps.ProjectileIds.get_entry_from_entity_id(entity_id)

  Irene.storages.entity:remove_entry(entity_id, Entity.destroy)

  if proj_ids_opt.filled then
    local proj_ids = proj_ids_opt:get()

    ##[[
    local should_not_autoremove = {
      entity_id = true,
      self_id = true,
      projectile_ids_id = true,
      intersections_id = true,
      projectile_id = true,
      texture_comp_id = true,
    }
    ]]

    ## for i, field in ipairs(Projectile.value.fields) do
      ## if not should_not_autoremove[field.name] then
        ## local actual_fname = field.name:sub(1, -4)
        Irene.storages.#|actual_fname|#:remove_entry(proj_ids.#|actual_fname|#)
      ## end
    ## end

    Irene.storages.projectile_ids:remove_entry(proj_ids.projectile_ids)
  end
end

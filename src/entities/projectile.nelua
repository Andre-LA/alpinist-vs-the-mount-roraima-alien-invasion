require 'nene'
require 'rotor'
require 'irene.makers'
require 'settings'

local Vec2 = @Math.Vec2

global Game.Entities.Projectile = @MakeEntity('projectile',
  Irene.Comps.Position,
  Irene.Comps.Velocity,

  Irene.Comps.Intersectable,

  Irene.Comps.TextureComp,
  Irene.Comps.Sprite,
  Irene.Comps.AnimationPlayer,
  Irene.Comps.Painter
)
local Projectile = @Game.Entities.Projectile

global Projectile.Speed = @enum{
  Alpinist = 16,
  Enemy = 6,
}

function Projectile.create(
  pos: Vec2,
  direction: Vec2,
  proj_texture: Texture,
  spritesheet: SpriteSheet,
  animations: hashmap(string, AnimationRange),
  speed: number,
  mask: Settings.IntersectableMasks
): (Projectile, *Entity)
  local tile_size <const> = Settings.general.tile_size
  local start_anim <const> = animations[
    (mask == Settings.IntersectableMasks.ProjAlpinist and 'proj_alpinist' or 'proj_enemy')
  ]

  local proj, proj_ent = Projectile.new{
    position = {
      local_position = pos,
    },

    velocity = {
      active = true,
      final_velocity = direction * tile_size * speed,
    },

    intersectable = {
      =mask,
    },

    texture_comp = {
      texture = proj_texture,
    },

    sprite = {
      =spritesheet,
      layer = Settings.SpriteLayer.Projectile,
      current_frame = start_anim.from,
    },

    animation_player = {
      current_animation = start_anim,
      =animations, --[[ this copies hashmap, but it will share the reference
                        to the allocated memory, in other words, **don't destroy it!** ]]
      speed = 1,
      looping = true,
    },

    painter = {
      active = true,
      color = Color.Palette.white,
    },
  }

  local intersectable_vertices: [2]Vec2 = { {}, {8, 8} }

  local intersectable = proj:get_component(@Irene.Comps.Intersectable)
  intersectable:init(pos, &intersectable_vertices)

  return proj, proj_ent
end

function Projectile.destroy_projectile(entity_id: GenerationalIndex)
  local proj_e_opt = Projectile.get_entry_from_entity_id(entity_id)

  if proj_e_opt.filled then
    local proj_e = proj_e_opt:get()
    proj_e:destroy({})
  end
end

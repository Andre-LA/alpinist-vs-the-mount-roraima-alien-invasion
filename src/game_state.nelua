require 'nene'
require 'rotor-quick'

local Vec2, Rect = Nene.Math.Vec2, Nene.Math.Rect

global Game = @record{}
global Game.Systems = @record{}
global Game.Components = @record{}
global Game.Entities = @record{}

local RQ_Comps, RQ_Sys = RotorQuick.Components, RotorQuick.Systems
local GM_Sys, GM_Comps, GM_Ents = Game.Systems, Game.Components, Game.Entities

global Game.IntersectableMasks = @enum{
  Alpinist         = 1 << 0,
  Enemy            = 1 << 1,
  SurfaceTile      = 1 << 2,
  ProjAlpinist     = 1 << 3,
  ProjEnemy        = 1 << 4,
  NonIntersectable = 1 << 5,
}

global Game.SpriteLayer = @enum{
  Background = 0,
  Alpinist,
  Enemy,
  Projectile,
  Tile,
}

global Game.static_settings: record{
  tile_size: integer,
  gravity_acceleration: number,
} <const> = {
  tile_size = 16,
  gravity_acceleration = 10,
}

require 'entities'

local MapResouces = @record{
  texture: Nene.Texture,
  texture_atlas: Nene.TextureAtlas,
  tilemap: Nene.Tilemap
}

function MapResouces:load(path: stringview, nene_state: *Nene.CoreState)
  local ok, err, tex = nene_state:load_texture(path)
  check(ok, err)

  self.texture = tex
  self.texture_atlas = {
    texture = &self.texture,
    unit_width  = Game.static_settings.tile_size,
    unit_height = Game.static_settings.tile_size,
  }
  self.tilemap.atlas = &self.texture_atlas
end

local SpriteResouces = @record{
  texture: Nene.Texture,
  texture_atlas: Nene.TextureAtlas,
  spritesheet: Nene.SpriteSheet
}

function SpriteResouces:load(path: stringview, nene_state: *Nene.CoreState)
  local ok, err, tex = nene_state:load_texture(path)
  check(ok, err)

  self.texture = tex
  self.texture_atlas.texture = &self.texture
  self.spritesheet.atlas = &self.texture_atlas
end

global Game.State = @record{
  systems: record{
    -- game specific processing systems
    alpinist_controller: GM_Sys.AlpinistController,

    -- game general processing systems
    gravity_applier: RQ_Sys.GravityApplier,
    velocity_applier: RQ_Sys.VelocityApplier,
    position_hierarchy: RQ_Sys.PositionHierarchy,
    intersectable_update: RQ_Sys.IntersectableUpdate,
    intersections_detector: RQ_Sys.IntersectionsDetector,
    collisions: RQ_Sys.Collisions,
    follower_system: RQ_Sys.FollowerSystem,
    camera_holder_system: RQ_Sys.CameraHolderSystem,
    sprite_animation: RQ_Sys.SpriteAnimation,

    -- game general painting systems
    shape_painter: RQ_Sys.ShapePainter,
    sprite_painter: RQ_Sys.SpritePainter,
    tilemap_painter: RQ_Sys.TilemapPainter,

    -- debug painting systems
    intersectable_painter: RQ_Sys.IntersectablePainter,
    intersections_painter: RQ_Sys.IntersectionsPainter,
  },
  resources: record{
    alpinist: SpriteResouces,
    map: MapResouces,
  },
  nene_state: Nene.CoreState,
}
local State = Game.State

function State:init(nene_state: Nene.CoreState)
  -- init nene
  self.nene_state = nene_state

  -- load resources
  do
    -- alpinist
    self.resources.alpinist:load('resources/arts/characters/Personagem.png', self.nene_state)
    self.resources.alpinist.texture_atlas.unit_width = 31
    self.resources.alpinist.texture_atlas.unit_height = 33

    -- map
    self.resources.map:load('resources/arts/tileset/Tileset.png', self.nene_state)
    self.resources.map.tilemap.width  = 3
    self.resources.map.tilemap.height = 23
    self.resources.map.tilemap.map = {
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
      16, 17, 17,
    }

    -- flying disc
    self.resources.flying_disc:load('resources/arts/characters/Inimigo.png', self.nene_state)
    self.resources.flying_disc.texture_atlas.unit_width = 20
    self.resources.flying_disc.texture_atlas.unit_height = 25

    -- flying disc
    --self.resources.projectile:load('resources/arts/characters/Projetil.png', self.nene_state)
    --self.resources.projectile.texture_atlas.unit_width = 20
    --self.resources.projectile.texture_atlas.unit_height = 25

    -- dev help: check for non-initialized resources
    ## for i, field in pairs(State.value.fields.resources.type.fields) do
      check(self.resources.#|field.name|#.initialized, #['the "'..field.name..'" is not initialized']#)
    ## end
  end

  -- init systems
  ## for i, field in ipairs(State.value.fields.systems.type.fields) do
    self.systems.#|field.name|# = (@#[field.type]#).new()
  ## end
end

function State:systems_update(ent: *Entity)
  -- update systems
  ## for i, field in ipairs(State.value.fields.systems.type.fields) do
    self.systems.#|field.name|#:update(ent)
  ## end
end

function State:create_player(pos: Vec2): GM_Ents.Alpinist
  local pl, pl_ent = GM_Ents.Alpinist.create(pos, self.resources.alpinist.spritesheet)
  self:systems_update(pl_ent)
  return pl
end

function State:create_surf_collider(pos: Vec2, size: Vec2): GM_Ents.SurfaceCollider
  local surf_col, surf_col_ent = GM_Ents.SurfaceCollider.create(pos, size)
  self:systems_update(surf_col_ent)
  return surf_col
end

function State:create_map(pos: Vec2): GM_Ents.Map
  local map, map_ent = GM_Ents.Map.create(pos, self.resources.map.tilemap)
  self:systems_update(map_ent)

  self:create_surf_collider(pos, {1, self.resources.map.tilemap.height})
  return map
end

function State:terminate()
  self.nene_state:terminate()
end

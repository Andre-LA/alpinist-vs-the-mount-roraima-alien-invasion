require 'nene'
require 'irene'
require 'resources'
require 'sfx_emitter'
require 'entities'

local Vec2, Rect, Grid = @Math.Vec2, @Math.Rect, @Math.Grid

global Game.State = @record{
  window_size: Vec2,
  screen_size: Vec2,

  nene: Nene,

  resources: Resources,
  screen: Texture,

  systems: record{
    -- game specific processing systems
    alpinist_controller: Game.Sys.AlpinistController,
    flying_disc_controller: Game.Sys.FlyingDiscController,
    map_controller: Game.Sys.MapController,

    -- game general processing systems
    gravity_applier: Irene.Sys.GravityApplier,
    velocity_applier: Irene.Sys.VelocityApplier,
    position_hierarchy: Irene.Sys.PositionHierarchy,
    intersectable_update: Irene.Sys.IntersectableUpdate,
    intersections_detector: Irene.Sys.IntersectionsDetector,
    follower_system: Irene.Sys.FollowerSystem,
    camera_holder_system: Irene.Sys.CameraHolderSystem,
    sprite_animation: Irene.Sys.SpriteAnimation,

    -- game general painting systems
    shape_painter: Irene.Sys.ShapePainter,
    sprite_painter: Irene.Sys.SpritePainter,
    tilemap_painter: Irene.Sys.TilemapPainter,

    -- debug painting systems
    intersectable_painter: Irene.Sys.IntersectablePainter,
    intersections_painter: Irene.Sys.IntersectionsPainter,
  },
}
local State = Game.State

function State.new(title: string, win_width: integer, win_height: integer)
  local screen_w: integer, screen_h: integer = win_width // 2, win_height // 2

  local ok, nene = Nene.init(title, win_width, win_height)
  assert(ok, 'could not initialize nene')

  local result: State = {
    window_size = {win_width, win_height},
    screen_size = {screen_w, screen_h},
    =nene,
    screen = Texture.create_texture(nene, screen_w, screen_h, nil, SDL_TEXTUREACCESS_TARGET)
  }

  return result
end

function State:init()
  self.resources:load_and_init(self.nene)

  -- init systems
  ## for _, field in ipairs(State.value.fields.systems.type.fields) do
    self.systems.#|field.name|# = (@#[field.type]#).new()
  ## end

  -- init music
  self.resources.audio.music:play()
end

function State:systems_update(ent: *Entity)
  -- update on all systems
  ## for i, field in ipairs(State.value.fields.systems.type.fields) do
    self.systems.#|field.name|#:update(ent)
  ## end
end

function State:create_alpinist(pos: Vec2): Game.Entities.Alpinist
  local pl, pl_ent = Game.Entities.Alpinist.create(
    self.nene,
    pos,
    self.resources.alpinist.spritesheet_tex,
    self.resources.alpinist.spritesheet,
    self.resources.alpinist.animations
  )

  self:systems_update(pl_ent)
  return pl
end

function State:create_surf_collider(pos: Vec2, size: Vec2): Game.Entities.SurfaceCollider
  local surf_col, surf_col_ent = Game.Entities.SurfaceCollider.create(pos, size)
  self:systems_update(surf_col_ent)
  return surf_col
end

function State:create_flying_disc(pos: Vec2, alpinist_pos_id: GenerationalIndex)
  local fd, fd_ent = Game.Entities.FlyingDisc.create(
    self.nene,
    pos,
    self.resources.flying_disc.spritesheet_tex,
    self.resources.flying_disc.spritesheet,
    alpinist_pos_id
  )

  self:systems_update(fd_ent)
  return fd
end

function State:create_projectile(pos: Vec2, dir: Vec2, speed: Game.Entities.Projectile.Speed, mask: Settings.IntersectableMasks)
  local proj, proj_ent = Game.Entities.Projectile.create(
    pos,
    dir,
    self.resources.projectile.spritesheet_tex,
    self.resources.projectile.spritesheet,
    self.resources.projectile.animations,
    speed * self.nene.delta_time,
    mask
  )
  self:systems_update(proj_ent)
  return proj_ent
end

function State:create_map(pos: Vec2): Game.Entities.Map
  local map, map_ent = Game.Entities.Map.create(
    pos,
    self.resources.map.tileset,
    self.resources.map.tilemap
  )

  self:systems_update(map_ent)
  return map
end

function State:terminate()
  -- free systems
  ## for i, field in ipairs(State.value.fields.systems.type.fields) do
    self.systems.#|field.name|#:destroy()
  ## end

  -- free storages
  ## local should_not_autoremove = { entity = true, shape = true, scene_graph_node = true, intersections = true}

  ## for i, field in ipairs(Irene.value.metafields.storages.type.fields) do
    ## if not should_not_autoremove[field.name] then
      Irene.storages.#|field.name|#:destroy()
    ## end
  ## end

  Irene.storages.entity:destroy(Entity.destroy)
  Irene.storages.shape:destroy(Irene.Comps.Shape.destroy)
  Irene.storages.scene_graph_node:destroy(Irene.Comps.SceneGraphNode.destroy)
  Irene.storages.intersections:destroy(Irene.Comps.Intersections.destroy)

  -- free resources
  self.resources.font:destroy()

  self.resources.alpinist:destroy()
  self.resources.flying_disc:destroy()
  self.resources.projectile:destroy()
  self.resources.map:destroy()
  self.resources.scene_background:destroy()

  self.resources.audio.initialized = false
  self.resources.audio.sfx.enemy_hit:destroy()
  self.resources.audio.sfx.enemy_laser_shoot:destroy()
  self.resources.audio.sfx.enemy_explosion:destroy()
  self.resources.audio.sfx.alpinist_laser_shoot:destroy()
  self.resources.audio.sfx.alpinist_hit:destroy()
  self.resources.audio.sfx.alpinist_final_hit:destroy()

  self.resources.audio.music:destroy()

  -- free nene
  self.nene:terminate()
end
